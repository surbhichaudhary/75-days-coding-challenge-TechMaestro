Advantages: 
1) Simple to implement. 
2) Hash table never fills up, we can always add more elements to the chain. 
3) Less sensitive to the hash function or load factors. 
4) It is mostly used when it is unknown how many and how frequently keys may be inserted or deleted. 

Disadvantages: 
1) Cache performance of chaining is not good as keys are stored using a linked list. 
   Open addressing provides better cache performance as everything is stored in the same table. 
2) Wastage of Space (Some Parts of hash table are never used) 
3) If the chain becomes long, then search time can become O(n) in the worst case. 
4) Uses extra space for links. 

Performance of Chaining: 
Performance of hashing can be evaluated under the assumption that each key is equally likely to be hashed to any slot of table (simple uniform hashing).  

Data Structures For Storing Chains: 
Linked lists
Search: O(l) where l = length of linked list
Delete: O(l)
Insert: O(l)
Not cache friendly
Dynamic Sized Arrays ( Vectors in C++, ArrayList in Java, list in Python)
Search: O(l) where l = length of array
Delete: O(l)
Insert: O(l)
Cache friendly
Self Balancing BST ( AVL Trees, Red Black Trees)
Search: O(log(l))
Delete: O(log(l))
Insert: O(l)
Not cache friendly
Java 8 onwards use this for HashMap
