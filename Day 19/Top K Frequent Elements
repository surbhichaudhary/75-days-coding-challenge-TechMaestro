#include<algorithm>
#include<unordered_map>
#include<queue>

typedef pair<int,int> pi;

class Solution {
public:
    vector<int> topKFrequent(vector<int>& nums, int k) {
        //min heap;
        if( nums.size() < 2 ){
            return nums;
        }
        unordered_map<int,int> mp;
        for( int i =0; i<nums.size() ; i++ ){
            mp[nums[i]]++; // element,freq;
        }
        
        priority_queue< pi, vector<pi>, greater<pi> > pq;
        for( auto i: mp ){
            pq.push({i.second, i.first}); //freq, element
            if( pq.size() > k ){
                pq.pop();
            }
        }
        
        vector<int> ans;
        while( !pq.empty() ){
            pi f = pq.top();
            ans.push_back(f.second);
            pq.pop();
        }
        
        reverse( ans.begin(), ans.end() );
        return ans;
    }
};
