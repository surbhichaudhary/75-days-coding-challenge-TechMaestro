#include<stack>

typedef pair<int,int> pi;

class Solution {

    vector<int> nsl( vector<int>& h, int n ){
        stack<pi> s;
        vector<int> ans;

        for( int i = 0 ; i<n ; i++ ){
            if( s.empty() ){
                ans.push_back(-1);
            }
            else if( s.top().first >= h[i] ){
                while( !s.empty() && s.top().first >= h[i] ){
                    s.pop();
                }
                if( s.empty() ){
                    ans.push_back(-1);
                }
                else{
                    ans.push_back( s.top().second );
                }
            }
            else if ( s.top().first < h[i] ){
                ans.push_back( s.top().second );
            }
            s.push( { h[i], i } );
        }

        return ans;
    }

    vector<int> nsr( vector<int>& h, int n ){
        stack<pi> s;
        vector<int> ans;

        for( int i = n-1 ;i >= 0; i-- ){
            if( s.empty() ){
                ans.push_back(n);
            }
            else if( s.top().first >= h[i] ){
                while( !s.empty() && s.top().first >= h[i] ){
                    s.pop();
                }
                if( s.empty() ){
                    ans.push_back(n);
                }
                else{
                    ans.push_back( s.top().second );
                }
            }
            else{
                ans.push_back( s.top().second );
            }
            s.push( {h[i], i} );
        }
        reverse(ans.begin(), ans.end() );
        return ans;
    }

public:
    int largestRectangleArea(vector<int>& heights) {
        int n = heights.size();
        vector<int> l = nsl( heights, n );
        vector<int> r = nsr( heights, n );

        int mx =0;

        for( int i =0 ;i< n; i++ ){
            //cout<<<r[i]<<endl;
            int area = (r[i]-l[i]-1) * heights[i];

            mx = max( mx, area );
        }
        return mx;
    }
};
